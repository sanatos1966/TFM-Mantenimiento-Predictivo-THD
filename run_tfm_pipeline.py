"""
Sistema de Mantenimiento Predictivo TFM - Antonio Cantos & Renzo Chavez
Fr칤o Pac칤fico 1, Concepci칩n, Chile

Pipeline completo para reproducir resultados acad칠micos exactos:
- 101,646 registros industriales reales
- 439 anomal칤as detectadas
- F1-Score = 0.963
- Ensemble: Isolation Forest + DBSCAN (70/30)
"""

import os
import sys
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, f1_score
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')


class TFMPredictiveMaintenanceSystem:
    """
    Sistema de Mantenimiento Predictivo TFM
    Implementa ensemble Isolation Forest + DBSCAN para detecci칩n de anomal칤as
    """

    def __init__(self, config_path='config/config.json'):
        """Inicializar sistema con configuraci칩n TFM"""
        self.config = self.load_config(config_path)
        self.scaler = StandardScaler()
        self.isolation_forest = None
        self.dbscan = None
        self.results = {}

        if_cfg = self.config['models']['isolation_forest']
        print("游댢 Sistema TFM inicializado")
        print(f"游늵 Par치metros IF: contamination={if_cfg['contamination']}, "
              f"n_estimators={if_cfg['n_estimators']}, max_samples={if_cfg['max_samples']}")

    def load_config(self, config_path):
        """Cargar configuraci칩n del sistema"""
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"Archivo de configuraci칩n no encontrado: {config_path}")
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def load_data(self, file_path):
        """
        Cargar datos industriales reales
        Soporta CSV y Excel con filtrado autom치tico de NaN
        """
        print(f"游늭 Cargando datos desde: {file_path}")
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Archivo de datos no encontrado: {file_path}")

        # Cargar seg칰n extensi칩n
        if file_path.endswith('.csv'):
            df = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            df = pd.read_excel(file_path, engine="openpyxl")  # <- forzar openpyxl
        else:
            raise ValueError("Formato de archivo no soportado. Use CSV o Excel (.xlsx).")

        # Informaci칩n inicial
        print(f"游늵 Registros cargados: {len(df):,}")
        print(f"游늶 Columnas: {list(df.columns)}")

        # Filtrar NaN
        initial_count = len(df)
        df = df.dropna()
        final_count = len(df)
        print(f"游빛 Registros despu칠s de filtrar NaN: {final_count:,} "
              f"(eliminados: {initial_count - final_count:,})")

        # Validar columnas esperadas (aj칰stalas a tu dataset real)
        expected_columns = ['timestamp', 'compressor', 'vibration', 'current', 'thd']
        missing_columns = [col for col in expected_columns if col not in df.columns]
        if missing_columns:
            print(f"丘멆잺  Columnas faltantes (no bloqueante): {missing_columns}")

        # Convertir timestamp si existe
        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
            df = df.dropna(subset=['timestamp'])

        self.data = df
        return df

    def prepare_features(self, df):
        """
        Preparar caracter칤sticas para an치lisis ML (normalizaci칩n est치ndar)
        """
        print("游댃 Preparando caracter칤sticas...")
        feature_columns = ['vibration', 'current', 'thd']
        available_features = [c for c in feature_columns if c in df.columns]
        print(f"游늵 Caracter칤sticas disponibles: {available_features}")
        if not available_features:
            raise ValueError("No se encontraron caracter칤sticas v치lidas para ML")

        X = df[available_features].copy()
        X_scaled = self.scaler.fit_transform(X)
        X_scaled_df = pd.DataFrame(X_scaled, columns[... if necessary.
